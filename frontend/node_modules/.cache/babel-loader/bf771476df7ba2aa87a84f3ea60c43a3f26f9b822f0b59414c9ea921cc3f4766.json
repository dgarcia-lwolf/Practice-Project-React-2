{"ast":null,"code":"var _jsxFileName = \"/Users/dgarcia/udemy/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  // const events = data.events;\n  // return <EventsList events={events} />;\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500\n    // });\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    // const resData = await response.json();\n    //const res = new Response();\n\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/dgarcia/udemy/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return <Await resolve={events}>\n    {(loadedEvents) => <EventsList events={loadedEvents}/>}\n  </Await>;\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  // const events = data.events;\n  // return <EventsList events={events} />;\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    //return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500\n    // });\n    return json({ message: 'Could not fetch events.' }, {\n      status: 500\n    });\n  } else {\n    // const resData = await response.json();\n    //const res = new Response();\n\n    return response;\n  }\n}\n\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  })\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGT,aAAa,CAAC,CAAC;EAElC,oBAAOM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EAC1BC,YAAY,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;;EAER;EACA;EACA;EACA;EACA;AACF;AAACR,EAAA,CAZQD,UAAU;EAAA,QACEP,aAAa;AAAA;AAAAiB,EAAA,GADzBV,UAAU;AAcnB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,OAAOpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAClDC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA;;IAEA,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOtB,KAAK,CAAC;IACXO,MAAM,EAAES,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}